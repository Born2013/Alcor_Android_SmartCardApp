package com.bird.smt_sw;import android.app.Activity;import android.content.SharedPreferences;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.media.AudioFormat;import android.media.AudioRecord;import android.media.AudioSystem;import android.media.MediaRecorder;import android.os.AsyncTask;import android.os.Bundle;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.LinearLayout;import android.widget.ImageView;import android.content.ComponentName;import android.content.Intent;public class MMITestSubMic extends MMINewActivity {       private Button correctButton;       private Button errorButton;       private Button resetButton;       private int req_token;       	int frequency = 8000;	int channelConfiguration = AudioFormat.CHANNEL_CONFIGURATION_MONO;	int audioEncoding = AudioFormat.ENCODING_PCM_16BIT;	private RealDoubleFFT transformer;	int blockSize = 256;	Button startStopButton;	boolean started = false;	RecordAudio recordTask;	ImageView imageView;	Bitmap bitmap;	Canvas canvas;	Paint paint;	private SharedPreferences mPreferences;    private SharedPreferences.Editor mEditor;    private static final String TAG = "MMITestSubMic";    	@Override	public void onCreate(Bundle savedInstanceState)	{		super.onCreate(savedInstanceState);		setContentView(R.layout.sub_mic);		setTitle(R.string.sub_mic);				mPreferences = getSharedPreferences("mmitest", MODE_PRIVATE);        mEditor = mPreferences.edit();        correctButton = (Button) findViewById(R.id.correct);        errorButton = (Button) findViewById(R.id.error);        resetButton = (Button) findViewById(R.id.reset);        correctButton.setOnClickListener(mCorrectButtonHandler);        errorButton.setOnClickListener(mErrorButtonHandler);        resetButton.setOnClickListener(mRestdButtonHandler);		transformer = new RealDoubleFFT(blockSize);		imageView = (ImageView) this.findViewById(R.id.ImageView01);		bitmap = Bitmap.createBitmap((int) 256, (int) 100,		Bitmap.Config.ARGB_8888);		canvas = new Canvas(bitmap);		paint = new Paint();		paint.setColor(Color.GREEN);		imageView.setImageBitmap(bitmap);		started = true;		//[BIRD][副mic声音没效果][luye][20160723]begin        //AudioSystem.setParameters("ForceUseSpecificMic=2");////        /*[BIRD][Task2942][贴片模式下副mic测试没作用] kedongdong 20160816 begin*/		//AudioSystem.setParameters("SET_MIC_CHOOSE=2");//仅使用副mic        /*[BIRD][Task2942][贴片模式下副mic测试没作用] kedongdong 20160816 end*/		//[BIRD][副mic声音没效果][luye][20160723]end		recordTask = new RecordAudio();		recordTask.execute();	}	private class RecordAudio extends AsyncTask<Void, double[], Void>	{		@Override		protected Void doInBackground(Void... params)		{			try			{				int bufferSize = AudioRecord.getMinBufferSize(frequency,				channelConfiguration, audioEncoding);				AudioRecord audioRecord = new AudioRecord(				MediaRecorder.AudioSource.MIC, frequency,				channelConfiguration, audioEncoding, bufferSize);				short[] buffer = new short[blockSize];				double[] toTransform = new double[blockSize];				audioRecord.startRecording();				while (started)				{					int bufferReadResult = audioRecord.read(buffer, 0,					blockSize);					for (int i = 0; i < blockSize && i < bufferReadResult; i++)					{						toTransform[i] = (double) buffer[i] / 32768.0; // signed						// 16						// bit					}					transformer.ft(toTransform);					publishProgress(toTransform);				}				audioRecord.stop();			} catch (Throwable t)			{				Log.e("AudioRecord", "Recording Failed");			}			return null;		}		protected void onProgressUpdate(double[]... toTransform)		{			canvas.drawColor(Color.BLACK);			for (int i = 0; i < toTransform[0].length; i++)			{				int x = i;				int downy = (int) (100 - (toTransform[0][i] * 10));				int upy = 100;				canvas.drawLine(x, downy, x, upy, paint);			}			imageView.invalidate();		}	}    /*[BIRD][Task2942][贴片模式下副mic测试没作用] kedongdong 20160816 begin*/	@Override	protected void onResume()	{		super.onResume();        AudioSystem.setParameters("SET_MIC_CHOOSE=2");	}    /*[BIRD][Task2942][贴片模式下副mic测试没作用] kedongdong 20160816 end*/	@Override	protected void onPause()	{		super.onPause();		started = false;		recordTask.cancel(true);	}	@Override	protected void onDestroy()	{		super.onDestroy();		started = false;		recordTask.cancel(true);	}	private View.OnClickListener mCorrectButtonHandler = new View.OnClickListener() {		public void onClick(View v) {			mEditor.putInt(MMITestSubMic.this.getString(R.string.sub_mic), Test_launcherActivity.PASS);			//[BIRD][副mic声音没效果][luye][20160723]begin			mEditor.putInt("mic_test_result", 2);			//[BIRD][副mic声音没效果][luye][20160723]end			mEditor.commit();			AudioSystem.setParameters("ForceUseSpecificMic=0");////			finish();		}	};	private View.OnClickListener mErrorButtonHandler = new View.OnClickListener() {		public void onClick(View v) {			mEditor.putInt(MMITestSubMic.this.getString(R.string.sub_mic), Test_launcherActivity.FAIL);			//[BIRD][副mic声音没效果][luye][20160723]begin			mEditor.putInt("mic_test_result", 2);			//[BIRD][副mic声音没效果][luye][20160723]end			mEditor.commit();			AudioSystem.setParameters("ForceUseSpecificMic=0");////			finish();		}	};	private View.OnClickListener mRestdButtonHandler = new View.OnClickListener() {		public void onClick(View v) {						Intent intent = new Intent();			ComponentName comp = new ComponentName(MMITestSubMic.this, MMITestSubMic.class);			intent.setComponent(comp);			startActivity(intent);			finish();		}	};		@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		// TODO Auto-generated method stub		if (keyCode == KeyEvent.KEYCODE_HOME){						return true;		} else if (keyCode == KeyEvent.KEYCODE_MENU){						return true;		} else if (keyCode == KeyEvent.KEYCODE_VOLUME_UP){			Intent intent = new Intent();			ComponentName comp = new ComponentName(MMITestSubMic.this, MMITestSubMic.class);			intent.setComponent(comp);			startActivity(intent);			finish();			return true;		} else if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN){			mEditor.putInt(MMITestSubMic.this.getString(R.string.sub_mic), Test_launcherActivity.PASS);			//[BIRD][副mic声音没效果][luye][20160723]begin			mEditor.putInt("mic_test_result", 2);			//[BIRD][副mic声音没效果][luye][20160723]end			mEditor.commit();			AudioSystem.setParameters("ForceUseSpecificMic=0");////			finish();			return true;		}		return super.onKeyDown(keyCode, event);	}}